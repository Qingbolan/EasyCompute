// Code generated by Kitex v0.11.3. DO NOT EDIT.

package computeservice

import (
	"context"
	easycompute "easycompute/kitex_gen/easycompute"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"SubmitTask": kitex.NewMethodInfo(
		submitTaskHandler,
		newComputeServiceSubmitTaskArgs,
		newComputeServiceSubmitTaskResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTaskResult": kitex.NewMethodInfo(
		getTaskResult_Handler,
		newComputeServiceGetTaskResultArgs,
		newComputeServiceGetTaskResultResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CancelTask": kitex.NewMethodInfo(
		cancelTaskHandler,
		newComputeServiceCancelTaskArgs,
		newComputeServiceCancelTaskResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RegisterNode": kitex.NewMethodInfo(
		registerNodeHandler,
		newComputeServiceRegisterNodeArgs,
		newComputeServiceRegisterNodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetNodes": kitex.NewMethodInfo(
		getNodesHandler,
		newComputeServiceGetNodesArgs,
		newComputeServiceGetNodesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	computeServiceServiceInfo                = NewServiceInfo()
	computeServiceServiceInfoForClient       = NewServiceInfoForClient()
	computeServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return computeServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return computeServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return computeServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ComputeService"
	handlerType := (*easycompute.ComputeService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "easycompute",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func submitTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*easycompute.ComputeServiceSubmitTaskArgs)
	realResult := result.(*easycompute.ComputeServiceSubmitTaskResult)
	success, err := handler.(easycompute.ComputeService).SubmitTask(ctx, realArg.Task)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newComputeServiceSubmitTaskArgs() interface{} {
	return easycompute.NewComputeServiceSubmitTaskArgs()
}

func newComputeServiceSubmitTaskResult() interface{} {
	return easycompute.NewComputeServiceSubmitTaskResult()
}

func getTaskResult_Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*easycompute.ComputeServiceGetTaskResultArgs)
	realResult := result.(*easycompute.ComputeServiceGetTaskResultResult)
	success, err := handler.(easycompute.ComputeService).GetTaskResult_(ctx, realArg.TaskId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newComputeServiceGetTaskResultArgs() interface{} {
	return easycompute.NewComputeServiceGetTaskResultArgs()
}

func newComputeServiceGetTaskResultResult() interface{} {
	return easycompute.NewComputeServiceGetTaskResultResult()
}

func cancelTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*easycompute.ComputeServiceCancelTaskArgs)

	err := handler.(easycompute.ComputeService).CancelTask(ctx, realArg.TaskId)
	if err != nil {
		return err
	}

	return nil
}
func newComputeServiceCancelTaskArgs() interface{} {
	return easycompute.NewComputeServiceCancelTaskArgs()
}

func newComputeServiceCancelTaskResult() interface{} {
	return easycompute.NewComputeServiceCancelTaskResult()
}

func registerNodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*easycompute.ComputeServiceRegisterNodeArgs)

	err := handler.(easycompute.ComputeService).RegisterNode(ctx, realArg.Node)
	if err != nil {
		return err
	}

	return nil
}
func newComputeServiceRegisterNodeArgs() interface{} {
	return easycompute.NewComputeServiceRegisterNodeArgs()
}

func newComputeServiceRegisterNodeResult() interface{} {
	return easycompute.NewComputeServiceRegisterNodeResult()
}

func getNodesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*easycompute.ComputeServiceGetNodesArgs)
	realResult := result.(*easycompute.ComputeServiceGetNodesResult)
	success, err := handler.(easycompute.ComputeService).GetNodes(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newComputeServiceGetNodesArgs() interface{} {
	return easycompute.NewComputeServiceGetNodesArgs()
}

func newComputeServiceGetNodesResult() interface{} {
	return easycompute.NewComputeServiceGetNodesResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SubmitTask(ctx context.Context, task *easycompute.ComputeTask) (r string, err error) {
	var _args easycompute.ComputeServiceSubmitTaskArgs
	_args.Task = task
	var _result easycompute.ComputeServiceSubmitTaskResult
	if err = p.c.Call(ctx, "SubmitTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTaskResult_(ctx context.Context, taskId string) (r *easycompute.ComputeTask, err error) {
	var _args easycompute.ComputeServiceGetTaskResultArgs
	_args.TaskId = taskId
	var _result easycompute.ComputeServiceGetTaskResultResult
	if err = p.c.Call(ctx, "GetTaskResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelTask(ctx context.Context, taskId string) (err error) {
	var _args easycompute.ComputeServiceCancelTaskArgs
	_args.TaskId = taskId
	var _result easycompute.ComputeServiceCancelTaskResult
	if err = p.c.Call(ctx, "CancelTask", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) RegisterNode(ctx context.Context, node *easycompute.NodeInfo) (err error) {
	var _args easycompute.ComputeServiceRegisterNodeArgs
	_args.Node = node
	var _result easycompute.ComputeServiceRegisterNodeResult
	if err = p.c.Call(ctx, "RegisterNode", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) GetNodes(ctx context.Context) (r []*easycompute.NodeInfo, err error) {
	var _args easycompute.ComputeServiceGetNodesArgs
	var _result easycompute.ComputeServiceGetNodesResult
	if err = p.c.Call(ctx, "GetNodes", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
