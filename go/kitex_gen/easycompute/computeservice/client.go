// Code generated by Kitex v0.11.3. DO NOT EDIT.

package computeservice

import (
	"context"
	easycompute "easycompute/kitex_gen/easycompute"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SubmitTask(ctx context.Context, task *easycompute.ComputeTask, callOptions ...callopt.Option) (r string, err error)
	GetTaskResult_(ctx context.Context, taskId string, callOptions ...callopt.Option) (r *easycompute.ComputeTask, err error)
	CancelTask(ctx context.Context, taskId string, callOptions ...callopt.Option) (err error)
	RegisterNode(ctx context.Context, node *easycompute.NodeInfo, callOptions ...callopt.Option) (err error)
	GetNodes(ctx context.Context, callOptions ...callopt.Option) (r []*easycompute.NodeInfo, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kComputeServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kComputeServiceClient struct {
	*kClient
}

func (p *kComputeServiceClient) SubmitTask(ctx context.Context, task *easycompute.ComputeTask, callOptions ...callopt.Option) (r string, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SubmitTask(ctx, task)
}

func (p *kComputeServiceClient) GetTaskResult_(ctx context.Context, taskId string, callOptions ...callopt.Option) (r *easycompute.ComputeTask, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTaskResult_(ctx, taskId)
}

func (p *kComputeServiceClient) CancelTask(ctx context.Context, taskId string, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CancelTask(ctx, taskId)
}

func (p *kComputeServiceClient) RegisterNode(ctx context.Context, node *easycompute.NodeInfo, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RegisterNode(ctx, node)
}

func (p *kComputeServiceClient) GetNodes(ctx context.Context, callOptions ...callopt.Option) (r []*easycompute.NodeInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetNodes(ctx)
}
